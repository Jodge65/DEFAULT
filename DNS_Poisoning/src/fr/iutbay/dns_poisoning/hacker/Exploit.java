package fr.iutbay.dns_poisoning.hacker;

import fr.iutbay.dns_poisoning.dns.DNS;

public class Exploit
{
	/** <i>String</i> where is temporary store url target if the exploit is running */
	protected static String tempsUrl = null;
	/** <i>String</i> where is temporary store ip redirection if the exploit is running */
	protected static String tempsIp = null;
	/** <i>int</i> where is temporary store interval between two push of the exploit if the exploit is running */
	protected static int tempsInterval = 0;

	/** <i>String</i> where is store the url target. This variable is use by the exploit when insert into cache*/
	protected static String url = "www.facebook.com";
	/** <i>String</i> where is store the ip target. This variable is use by the exploit when insert into cache*/
	protected static String ip = "www.google.fr";
	/** <i>int</i> where is store the time between to push. This variable is use by the exploit when insert into cache*/
	protected static int interval = 12;
	/** <i>int</i> this value give the actual tic. when tic == interval, then value is reset, and exploit is use one time*/
	private static int actuel = 0;
	/** <i>boolean</i> give the actual stat of exploit. true = on, false = off */
	protected static boolean etat = false;
	
	/**	@return <i>boolean</i> true if the exploit is running */
	public static boolean isOn(){ return etat;}
	/**	@return <i>boolean</i> true if the exploit is not running */
	public static boolean isOff(){ return !isOn();}
	/**	@return <i>boolean</i> true if the exploit have some value store in is cache */
	public static boolean majNeeded() {return tempsUrl != null || tempsIp != null;}

	/**	@return <i>String</i> return the temporary value of Url */
	public static String getTempsUrl(){ return tempsUrl; }	
	/**	@return <i>String</i> return the temporary value of Ip */
	public static String getTempsIp(){ return tempsIp; }
	
	/**
	 * this function is call each hour in game. Each time the variable actuel = interval selected, an update of the DNS is set.
	 */
	public static void onUptade()
	{
		if(etat)
		{
			actuel++;
			if(interval == actuel)
			{
				actuel = 0;
				uptadeDNS();
			}
		}
	}
	
	/**
	 * if the Exploit is running, then the value is store in temps. else, value is put in memory.
	 * @param newUrl <i>String</i> url to put in exploit
	 */
	public static void setUrl(String newUrl)
	{
		if(etat)
			tempsUrl = newUrl;
		else
			url = newUrl;
	}
	
	/**
	 * if the Exploit is running, then the value is store in temps. else, value is put in memory.
	 * @param newUrl <i>String</i> ip to put in exploit
	 */
	public static void setIp(String newIp)
	{
		if(etat)
			tempsIp = newIp;
		else
			ip = newIp;
	}
	
	/**
	 * if the Exploit is running, then the value is store in temps. else, value is put in memory.
	 * @param newUrl <i>int</i> interval to put in exploit
	 */
	public static void setInterval(int value)
	{
		if(etat)
			tempsInterval = value;
		else
			interval = value;
	}
	
	/** force an upgate of the cache of the DNS */
	public static void forceUptade()
	{
		uptadeDNS();
	}
	
	/** start the exploit and update the cache of DNS */
	public static void start()
	{
		etat = true;
		uptadeDNS();
	}
	
	/** stop the exploit and  update value if needed */
	public static void stop()
	{
		etat = false;
		actuel = 0;
		if(tempsIp != null)
		{
			setIp(tempsIp);
			tempsIp = null;
		}
		
		if(tempsUrl != null)
		{
			setUrl(tempsUrl);
			tempsUrl = null;
		}
		
		if(tempsInterval != 0)
		{
			setInterval(tempsInterval);
			tempsInterval = 0;
		}
	}
	
	/** stop and start the exploit. Value are update and push into DNS cache */
	public static void restart()
	{
		stop();
		start();
	}
	
	/** update the cache of the DNS when is call. */
	public static void uptadeDNS()
	{
		DNS.myDNS.addOnCache(url, ip);
	}
}
